(ns cmis.etl.nagios
  (:require [clj-time.core :as time]
            [clj-time.coerce :as coerce])
  )

(def nagios-service-pattern #"\[(\d+)\] [\w ]*SERVICE [\w]*: (.+);(.+);(\w+);(\w+);(\d*);(.*)")
(def nagios-cpu-pattern #"CPU STATISTICS OK : user=([\d.]+)% system=([\d.]+)% iowait=([\d.]+)% idle=([\d.]+)%")
(def nagios-io-latency #".*- io .* latency=(\d+) ms")
(def nagios-mem-free #"Memory .* - ([\d\.]*)% \(([\d]*)kB\) free")

(defn each-line
  "Perform actions on each line of a file"
  [file & fns]
  (with-open [reader (clojure.java.io/reader file)]
    (doseq [line (line-seq reader)]
      (doall
       (map #(% line) fns)))))

(defn each-service-line
  "Perform actions on each service line of a file"
  [file & fns]
  (each-line file
             (fn [line]
               (let [m (re-matches nagios-service-pattern line)]
                 (if m
                   (let [[_ timestamp hostname check status _ _ msg] m
                         timestamp* (coerce/from-long (* (Long/parseLong timestamp) 1000))
                         check {:timestamp timestamp*
                                :hostname hostname
                                :check check
                                :status status
                                :msg msg}]
                     (doall
                      (map #(% check) fns))))))))

(defn parse
  [& files]
